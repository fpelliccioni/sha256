// Copyright (c) 2023 Fernando Pelliccioni.
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

// Initialize hash values:
// (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
h[0] := 0x6a09e667
h[1] := 0xbb67ae85
h[2] := 0x3c6ef372
h[3] := 0xa54ff53a
h[4] := 0x510e527f
h[5] := 0x9b05688c
h[6] := 0x1f83d9ab
h[7] := 0x5be0cd19

// Initialize array of round constants:
// (first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311):
k[0..63] :=
   0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
   0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
   0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
   0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
   0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
   0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
   0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
   0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2

// Initialize message schedule array:
w[64]

// Process the message in successive 512-bit chunks:
// for each 512-bit chunk of message:
for i from 0 to n/512 - 1 do
    // create a 64-entry message
    schedule array w[0..63] of 32-bit words
    for j from 0 to 15 do
        w[j] := message[i512 + j4]
    end for

    // Extend the first 16 words into the remaining 48 words w[16..63]
    for j from 16 to 63 do
        s0 := (w[j-15] rightrotate 7) xor (w[j-15] rightrotate 18) xor (w[j-15] rightshift 3)
        s1 := (w[j-2] rightrotate 17) xor (w[j-2] rightrotate 19) xor (w[j-2] rightshift 10)
        w[j] := w[j-16] + s0 + w[j-7] + s1
    end for

    // Initialize working variables to current hash value:
    a := h[0]
    b := h[1]
    c := h[2]
    d := h[3]
    e := h[4]
    f := h[5]
    g := h[6]
    h := h[7]

    // Compression function main loop:
    for j from 0 to 63 do
        S1 := (e rightrotate 6) xor (e rightrotate 11) xor (e rightrotate 25)
        ch := (e and f) xor ((not e) and g)
        temp1 := h + S1 + ch + k[j] + w[j]
        S0 := (a rightrotate 2) xor (a rightrotate 13) xor (a rightrotate 22)
        maj := (a and b) xor (a and c) xor (b and c)
        temp2 := S0 + maj
        h := g
        g := f
        f := e
        e := d + temp1
        d := c
        c := b
        b := a
        a := temp1 + temp2
    end for

    // Add the compressed chunk to the current hash value:
    h[0] := h[0] + a
    h[1] := h[1] + b
    h[2] := h[2] + c
    h[3] := h[3] + d
    h[4] := h[4] + e
    h[5] := h[5] + f
    h[6] := h[6] + g
    h[7] := h[7] + h
end for

// Produce the final hash value (big-endian)
result := h[0] append h[1] append h[2] append h[3] append h[4] append h[5] append h[6] append h[7]